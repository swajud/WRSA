{
    "contents" : "#------------------------------------------------------DOCUMENTATION------------------------------------------#\n#for detailed explanation of R and SQL structure, see buglab\\Research Projects\\BLM_WRSA_Stream_Surveys\\Technology\\WRSA data management.docx\n\n\n#-------------------------------------------------------INPUTS--------------------------------------------------------#\n#In the ideal world, users should only need to put inputs here and be able to get results out of the 'black box' below using existing functions.\nDBpassword=''#Always leave blank when saving for security and because changes annually. Contact Sarah Judson for current password.\nDBuser=''#ditto as with DBpassword\nDBserver=''#ditto as with DBpassword\n#this is a change\n\n\n#--------------------------------------------------------SETUP--------------------------------------------------------#\n#LOAD required packages#\nrequiredPACKAGES=c('reshape', 'RODBC','ggplot2','grid','gridExtra','xlsx','sqldf','jpeg','spsurvey')\nfor (r in 1:length(requiredPACKAGES)){\n  if ((requiredPACKAGES[r] %in% installed.packages()[,1])==FALSE){install.packages(requiredPACKAGES[r])}#auto-install if not present\n  library(requiredPACKAGES[r],character.only = TRUE)\n}\n\n#default working directory is the location of the Rproject which is custom to each collaborator and should automatically be set when project is loaded\n#setwd('\\\\\\\\share1.bluezone.usu.edu\\\\miller\\\\buglab\\\\Research Projects\\\\BLM_WRSA_Stream_Surveys\\\\Technology\\\\Output\\\\WRSA')#SWJ to do: map more dynamically but securely\n#setwd('C:\\\\Users\\\\Sarah\\\\Desktop\\\\NAMCdevelopmentLocal\\\\WRSA')##Sarah desktop\n\n\n\n##Establish an ODBC connection##\n#the db was created in SQL Server Manager on 11/19/2013 by Sarah Judson#\nwrsaConnectSTR=sprintf(\"Driver={SQL Server Native Client 10.0};Server=%s;Database=WRSAdb;Uid=%s; Pwd=%s;\",DBserver,DBuser, DBpassword)\nwrsa1314=odbcDriverConnect(connection = wrsaConnectSTR)\n#SWJ to do: throw this into a function that also prompts for server and password if missing (='')\n#SWJ to do: throw the function into a separate referenced script because multiple files are using this\n\noptions(stringsAsFactors=F,\"scipen\"=50)#general option, otherwise default read is as factors which assigns arbitrary number behind the scenes to most columns\n\n#SQL assistance functions\n#loaded from a separate R script\nsource('FNC_tblRetrievePVT.R')\n#common sQL strings that need to be incorporated:\n##(select * from tblVERIFICATION where PARAMETER='site_id') v on v.UID=tblPOINT.uid\n\n\n\n#------------------------------------------------------DEFAULTS-----------------------------------------------\n#FILTERS\n##from most to least specific\nAllData='N'#set to 'Y' (meaning 'yes') if you want to query all sites (note this is quite time consuming and large, use provided filters wherever possible)\nsitecodes=''#c('EL-LS-8134','EL-SS-8127','MN-LS-1004','MN-SS-1104','MS-SS-3103','XE-RO-5086','XN-LS-4016','XN-SS-4128','XS-LS-6029' )#QAduplicateSites#c('AR-LS-8003','AR-LS-8007', 'TP-LS-8240')#sites for NorCalTesting\nyears=c('2014')#as character, not number\ndates=''##example:c('05/05/2005')\nprojects=c('WRSA')# most useful for separating NorCal and WRSA, note that abbreviations differ between Access and SQL/FM\nprotocols=c('WRSA14')#for separating differences in overall protocol, may not be relevant for some parameters\nhitchs=c('')#NOT WORKING YET, hitch and crew level generally maintained by Access not SQL\ncrews=c('R1')#NOT WORKING YET, hitch and crew level generally maintained by Access not SQL#see crewKC in customrequests for possible method\nfilter=''#custom filter (need working knowledge of Parameter:Result pairs and SQL structure; example: \"(Parameter='ANGLE' and Result>50) OR (Parameter='WETWID' and Result<=0.75))\"\nUIDs='BLANK'#custom filter (need working knowledge of primary keys)\n#NorCal settings: #years=c('2013','2014');projects='NorCal';protocols=c('WRSA14','NRSA13')\n\n#PARAMETERS\n#specify if desired (will make queries less intensive):\nAllParam='Y'#set to 'Y' (meaning 'yes') if you want to query all parameters\ntestP=c('ANGLE','APPEALING','ALGAE')#test, one from each level of table\nbankP=c('ANGLE','UNDERCUT','EROSION','COVER','STABLE')\n\n\n#------------------------------------------------------EXAMPLES------------------------------------------------------------------#\n\n#Most data requests use the following basic workflow and structure. Save any custom requests created to CustomRequest_WRSAdb.R for documentation.\n#CALL data in using tblRetrieve() #at least ONE filter required, Parameters NOT required, Comments optional (default is no). For possible filters, see \"WRSA data managment.docx\" OR use getAnywhere(tblRetrieve) and examine available varaiables in the function() inputs section.\nEXAMPLEcond=tblRetrieve(Parameters=c('CONDUCTIVITY','CORRECTED'), Comments='N',Projects='NorCal',Years=c('2013','2014'))\n#PIVOT data using cast() function for easier viewing. IND will be lost if need for tracking. Alternative: aggregate() function OR PVTconstruct() assists in building SQL string for custom PIVOTS in SQL Server.\nEXAMPLEcondPVT=cast(EXAMPLEcond,'UID~PARAMETER',value='RESULT') \n#KEYS added for data interpretability. Any parameters stored in tblVERIFICATION are available to add. Suggested minimum additions are Site_ID + Date_COL. In this example, coordinates for mapping.\nEXAMPLEcondPVT=addKEYS(EXAMPLEcondPVT ,c('SITE_ID','DATE_COL','LOC_NAME','LAT_DD','LON_DD'))\n#EXPORT results via csv\nwrite.csv(EXAMPLEcondPVT,'ExampleConductivityCorrected_TodaysDate.csv')#pivoted does not contain IND\n\n#Example of retrieving all raw data for an entire project\nNorCal1314=tblRetrieve(ALLp='Y',Years=c('2013','2014'),Projects='NorCal')\nNorCal1314subCOND=subset(NorCal1314,PARAMETER %in% c('CONDUCTIVITY','CORRECTED'))#and again subsetting it just for a few parameters like EXAMPLEcond\n\n##---------METADATA for reference---------##\n#use RODBC package sqlQuery() function, not tblRetrieve\n#parameter descriptions\nMETADATA=sqlQuery (wrsa1314,\"select * from tblMETADATA where ACTIVE='TRUE'\")#see \"Label\" for interpretable names #be careful with SQL strings, enclose in double quote and use single quotes for text\n#query a particular protocol\nMETADATAprotocol=sqlQuery (wrsa1314,\"select * from tblMETADATAprotocol where ACTIVE='Y' and Protocol='WRSA14'\")#expected counts\n#compare protocols\nMETADATAprotocolS=sqlQuery(wrsa1314, \"select distinct Result from tblverification where parameter='Protocol' union select distinct Protocol from tblmetadataprotocol\")\n    #METADATAprotocolS=protocols\n    METADATAprotocolS=data.frame(METADATAprotocolS)\n    protocolSTR1=\"select m.SAMPLE_TYPE,m.PARAMETER,m.UNITS,m.LABEL,m.VAR_TYPE,m.ACTIVE,m.INSERTION,m.REASON\"\n    protocolSTR2a=\"left join (select PROTOCOL,SAMPLE_TYPE as ST, PARAMETER as PM, POINTS,REPS,Insertion,NOTE  from tblMetadataProtocol where Protocol='%s' and ACTIVE='Y') %s on %s.ST=substring(m.SAMPLE_TYPE,1,len(m.SAMPLE_TYPE)-1) and %s.PM=m.parameter\"\n    METADATAprotocolSpairs=subset(expand.grid(P1=unclass(METADATAprotocolS)[[1]],P2=unclass(METADATAprotocolS)[[1]]),P1!=P2)\n    protocolSTR3a=\"(isnull(%s.Points*%s.Reps,0) <> isnull(%s.Points*%s.Reps,0))\"\n    for (p in 1:nrow(METADATAprotocolS)){\n      currP=METADATAprotocolS[p,1]\n      protocolSTR1=sprintf(\"%s, %s.*\",protocolSTR1,currP)\n      protocolSTR2=sprintf(\"%s %s\",ifelse(p==1,'',protocolSTR2),sprintf(protocolSTR2a,currP,currP,currP,currP))\n      pair=subset(METADATAprotocolSpairs,P1==currP)\n      for (r in 1:nrow(pair)){\n        p1=pair$P1[r];p2=pair$P2[r]\n        protocolSTR3=sprintf(\"%s %s\",ifelse(p==1,'',sprintf(\"%s or\", protocolSTR3)),sprintf(protocolSTR3a,p1,p1,p2,p2))\n      }\n    }\n    protocolSTRdiff=sprintf(\"%s from tblmetadata m %s where %s order by m.SAMPLE_TYPE, m.parameter\",protocolSTR1,protocolSTR2,protocolSTR3)\n    protocolSTRcomp=sprintf(\"%s from tblmetadata m %s order by m.SAMPLE_TYPE, m.parameter\",protocolSTR1,protocolSTR2)\n    METADATAprotocolCOMPARE=sqlQuery(wrsa1314,protocolSTRcomp)  \n    METADATAprotocolDIFF=sqlQuery(wrsa1314,protocolSTRdiff)  \n    View(METADATAprotocolDIFF)\n#legal values for parameters\nMETADATArange=sqlQuery (wrsa1314,\"select * from tblMETADATArange where ACTIVE='TRUE' and Protocol='WRSA14'\")#legal values\n#matchup of parameters to indicators\nMETADATAindicators=sqlQuery (wrsa1314,\"select * from tblXwalk where NAME_xwalk='MissingBackend' and type_xwalk='Indicator'\")\n    indicators=NULL\n    for (i in 1:nrow(METADATAindicators)){indicators=paste(indicators,METADATAindicators$Parameter_Xwalk[i],sep=\"|\")}\n    indicators=unique(unlist(strsplit(indicators,\"\\\\|\")));indicators=indicators[2:length(indicators)];indicators=gsub(\" \",\"\",indicators)\n    for (p in 1:length(indicators)){\n      METADATAparameters=sqlQuery (wrsa1314,sprintf(\"select * from tblXwalk where NAME_xwalk='MissingBackend' and PARAMETER_Xwalk like '%%%s%%'\",indicators[p]))\n      METADATAparameters$INDICATOR=indicators[p]\n      if(p==1){parameters=METADATAparameters} else{parameters=rbind(parameters,METADATAparameters)}\n    }  \n    View(indicators);View(parameters)\n\n\n#--------------------------------------------------------SQL RETRIEVE (old examples)--------------------------------------------------------#\n\n#select samples\nUIDs=UIDselect(ALL=AllData,Filter=filter,UIDS='',SiteCodes=sitecodes,Dates=dates,Years=years,Projects=projects,Protocols=protocols)\n#SWJ to do: add additional filters\n#SWJ to do: prompt for data entry (mini-GUI)\n\n\n#retrieve all data as a single list table\nUnionTBL=tblRetrieve(Table='',Parameters='',ALLp=AllParam,UIDS=UIDs,ALL=AllData,Filter=filter,SiteCodes=sitecodes,Dates=dates,Years=years,Projects=projects,Protocols=protocols)\n\n\nSites=subset(UnionTBL,select=c(UID,RESULT),subset=PARAMETER=='SITE_ID'); colnames(Sites)=c('UID','SITE_ID')#!append sitecode instead of UID to make the table more readable --> migrate this into tblRetrieve or some kind of \"convert\" function\nUnionTBL=merge(UnionTBL,Sites)\nUnionTBL$SITE_ID=as.character(UnionTBL$SITE_ID)\nUnionTBL1=merge(UnionTBL,UIDs)#limit by UIDs (\"select samples)\n\n#retrieve desired tables\n#EXAMPLES of tblRetrieve function# (note: parameter lists were specified in the \"Inputs\" section at the beginning of this script)\ntblREACH=tblRetrieve('tblREACH')#not specifying parameters will retrieve the entire table\ntblREACHtest=tblRetrieve('tblREACH',testP)\ntblPOINTbank=tblRetrieve('tblPOINT',bankP)\n#SWJ to do - could add GIS tables (pull from PilotDB if possible)\n#SWJ to do - could add logistics tables (pull from UTBLM.accdb)\n\n\n\n#Close ODBC connection when done talking to SQL Server\nodbcClose(wrsa1314); rm(DBpassword); rm(DBserver); rm(DBuser)\n\n#--------------------------------------------------------CUSTOM PIVOT VIEWS--------------------------------------------------------#\n##RESHAPE to PIVOT## \n#EXAMPLES of both methods#\n#SQL option ('View' creation to copy/paste)\nbankPVTstr=PVTconstruct(parameters=bankP,tblTYPE='tblPOINT', filter=\"POINT in ('LF','RT')\");print(bankPVTstr)#- need permission from Sarah Judson and to reopen ODBC before saving Views for permanent use in SQL Server\n  #retrieve said query from SQL\n    wrsa1314_2=odbcDriverConnect(connection = wrsaConnectSTR)\n    tblPOINTbankPVTs=sqlQuery(wrsa1314_2,bankPVTstr)\n    odbcClose(wrsa1314_2)\n#R option (cast)\ntblPOINTbankPVTr=cast(subset(tblPOINTbank,select=c(UID, TRANSECT,POINT,PARAMETER,RESULT)), UID + TRANSECT + POINT ~ PARAMETER)#very predictable structure except for the input table and whether transect and point need to be included in the columns = possibly plug into function\n\n\n#--------------------------------------------------------ANALYSIS--------------------------------------------------------#\n##AGGREGATION##\n#EXAMPLES#\n#count number of records per parameter to check for missing data\nqastatsBANK_CNTcast=cast(tblPOINTbank, UID ~ PARAMETER, value='RESULT', fun.aggregate=length)#should this filter out NULLs or flags? does EPA write a line for each record even if no value recorded?\nqastatsBANK_CNTagg=aggregate(tblPOINTbank,FUN='length', by=list(tblPOINTbank$UID,tblPOINTbank$TRANSECT,tblPOINTbank$POINT))\n#cast seems like the more elegant solution\n#convert numerics before performing stats\ntblPOINTbankNUM=subset(tblPOINTbank,subset= is.na(as.numeric(as.character(tblPOINTbank$RESULT)))==FALSE);tblPOINTbankNUM$RESULT=as.numeric(as.character(tblPOINTbankNUM$RESULT))\nqastatsBANK_MEANcast=cast(tblPOINTbankNUM, UID ~ PARAMETER, value='RESULT', fun.aggregate=mean)\n\n#iteration example\nlist=c(1,2,4,6,7)\nfor (i in 1:length(list)){\n  if(list[i]<5){\n    print(list[i] + 2)\n  } else {print(list[i] *5 )}\n}\n\n\n##QA checks##\n##!QA checks moved to DataQA_WRSA\n\n\n##GRTS adjusted weights##\n#TBD# Pull from UTBLM\n\n##EPA aquamet##\n#TBD# Pull from aquamet 1.0 provided by Tom Kincaid and Curt Seegler via Marlys Cappaert\n#go to NRSAmetrics_SWJ.R\n\n##OE computation##\n#TBD# Pull from VanSickle\n\n#Predicted WQ##\n#TBD#  Pull from UTBLM, John Olson/Ryan Hill\n\n##NMDS##\n#TBD#\n\n##GIS connections##\n#TBD#\n\n\n#--------------------------------------------------------REPORTING--------------------------------------------------------#\n##Figures and Tables##\n#TBD# Pull from UTBLM\n\n##SWEAVE##\n#TBD#\n\n##BibTex##\n#TBD#\n\n\n#--------------------------------------------------------sarah's Gibberish-------------------------------------------------------#\n# #pseudocode - consume data from flat db\n# #ODBC connection to SQL server WRSAdb\n# #import via SQL string call - include filters on data (i.e. hitch, project, crew)\n# #mash (merge) tables (?) OR pvt for viewing (?) -- SQL: view, Access: Query\n# ##ex (old): merge(EVENT3,subset(original,select=selectCOLparse),by=\"SampleID\")\n# ##demonstrate complexity of calling by column name vs. parameter text in both SQL and R\n# ###SQL: filter query --> possibly PIVOT to view --> aggregate query\n# ###R: filter strings, apply across multiple --> PVT to view --> aggregate OR run predefined(EPA,R)/custom functions\n# ###common: convert numerics\n# ###differences: null handling, reproducability and documentation\n# ###leaning (SWJ): R for dynamic queries/code, reproducability and 'instant' documentation; in either mode, PIVOTS should be treated as temporary views for scanning data, not basis for subsequent queries because they will then be tied to column names \n# ##ex: library('reshape'); cast(data, x~y)\n# #separate numbers and characters (will R autodetect?) -- SQL: Cast/Convert\n# #filter by parameter and run metric  -- SQL: sub-queries\n# ##ex: subset(tblPOINT, subset=Parameter=='Angle')\n# ##could set it up so that user doesn't even need to which table\n# ##set up to easily call the parameters table and other metadata (crew, hitch) tables --> will we store crew and hitch info in sampletracking access or SQL server?\n# #aggregate by site and crew  -- SQL: group by (aggregate) query\n# ##ex (old): aggregate(x=as.numeric(sampDATAin$SampleID),FUN=agg3,by=list(sampDATAin$SamplingEvent,sampDATAin$Station,sampDATAin$WaterYear))\n# #report -- R SWEAVE vs. Access report vs. Crystal Reports\n# \n# #check for existing packages\n# #install.packages('reshape')\n# library('reshape')\n# \n# #establish an ODBC connection#\n# #the db was created in SQL Server Manager on 11/19/2013\n# #manually set up the database (WRSAdb) and the odcb connection (WRSAconnect)\n# library(\"RODBC\")\n# user='feng'\n# #ENTER DB PASSWORD\n# print (\"Please enter Password\")\n# password='Something~Clever!@'#(\"Enter Password\")#raw_input() in python, not sure of R equivalent #http://rosettacode.org/wiki/Dynamic_variable_names#R\n# nrsa1314<-odbcConnect(\"WRSAconnect\",uid=user,pwd=password)\n# #SQL assistance functions\n# #inLOOP: concatenate list objects into an \"IN\" string for insertion into queries\n# inLOOP=function(inSTR) {\n#   inSTR=unlist(inSTR)\n#   for (i in 1:length(inSTR)){\n#     comma=ifelse(i==length(inSTR),'',',')\n#     STRl=sprintf(\"'%s'%s\",inSTR[i],comma)\n#     if(i==1){loopSTR=STRl} else{loopSTR=paste(loopSTR,STRl)}\n#   }   \n#   return(loopSTR) \n# }\n# #tblRetrieve: standard retrieval query\n# tblRetrieve=function(table, parameters=''){\n#   if(parameters==''){parameters=sqlQuery(nrsa1314,sprintf(\"select distinct parameter from %s\", table))}\n#   sqlTABLE=sqlQuery(nrsa1314, sprintf('select * from %s where UID in (%s) and parameter in (%s)',table, inLOOP(UIDs),inLOOP(parameters)))\n#   return(sqlTABLE)#could auto return the pivoted view, but currently assuming that is for on the fly viewing and is not the easiest way to perform metrics\n# }\n# \n# \n# #FILTERS\n# ##from most to least specific\n# sitecodes=c('AR-LS-8003','AR-LS-8007', 'TP-LS-8240')\n# dates=c('05/05/2005')\n# hitchs=c('')\n# crews=c('R1')\n# projects=c('NRSA')\n# \n# \n# \n# #select samples\n# UIDs=sqlQuery(nrsa1314, sprintf(\"select distinct UID from tblVERIFICATION \n#                                 where (active='TRUE') \n#                                 AND ((Parameter='SITE_ID' and Result in (%s)) OR (Parameter='DATE_COL' and Result in (%s)))\"\n#                                 ,inLOOP(sitecodes),inLOOP(dates)))\n# #SWJ to do: add additional filters\n# #SWJ to do: prompt for data entry (mini-GUI)\n# \n# #PARAMETERS\n# #specify if desired (will make queries less intensive):\n# testP=c('ANGLE','APPEALING','ALGAE')#test, one from each level of table\n# bankP=c('ANGLE','UNDERCUT','EROSION','COVER','STABLE')\n# \n# #retrieve desired tables\n# tblREACH=tblRetrieve('tblREACH')#not specifying parameters will retrieve the entire table\n# tblREACHtest=tblRetrieve('tblREACH',testP)\n# tblPOINTbank=tblRetrieve('tblPOINT',bankP)\n# \n# #pivot tables for viewing\n# tblPOINTbankPVT=cast(subset(tblPOINTbank,select=c(UID, TRANSECT,POINT,PARAMETER,RESULT)), UID + TRANSECT + POINT ~ PARAMETER)#very predictable structure except for the input table and whether transect and point need to be included in the columns = possibly plug into function\n# \n# #further subset data in custom ways\n# \n# #compute aggregate statistics\n# #count number of records per parameter to check for missing data\n# qastatsBANK_CNTcast=cast(tblPOINTbank, UID ~ PARAMETER, value='RESULT', fun.aggregate=length)#should this filter out NULLs or flags? does EPA write a line for each record even if no value recorded?\n# qastatsBANK_CNTagg=aggregate(tblPOINTbank,FUN='length', by=list(tblPOINTbank$UID,tblPOINTbank$TRANSECT,tblPOINTbank$POINT))\n# #cast seems like the more elegant solution\n# #convert numerics before performing stats\n# tblPOINTbankNUM=subset(tblPOINTbank,subset= is.na(as.numeric(as.character(tblPOINTbank$RESULT)))==FALSE);tblPOINTbankNUM$RESULT=as.numeric(as.character(tblPOINTbankNUM$RESULT))\n# qastatsBANK_MEANcast=cast(tblPOINTbankNUM, UID ~ PARAMETER, value='RESULT', fun.aggregate=mean)\n# \n# #plugging into aquamet\n# \n# #end ODBC connection#\n# odbcClose(nrsa1314)\n",
    "created" : 1412874036867.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3966280254",
    "id" : "DD687B8C",
    "lastKnownWriteTime" : 1412874282,
    "path" : "C:/Users/Nicole/Desktop/TrialForGIT/WRSA/DataConsumption_WRSAdb.R",
    "project_path" : "DataConsumption_WRSAdb.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}